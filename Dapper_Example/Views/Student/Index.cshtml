@model IEnumerable<Dapper_Example.Models.Student>

@{
    ViewData["Title"] = "Index";
}

<div class="card">
    <div class="card-body">
        <form id="filter" method="get">
            <div class="form-group">
                <input name="Name" class="form-control" placeholder="İsim..." />
            </div>
            <div class="form-group">
                <input name="SurName" class="form-control" placeholder="Soyisim..." v />
            </div>
            <div class="form-group">
                <input name="mail" class="form-control" placeholder="EmailAdress..." v />
            </div>
            <button class="btn btn-warning">Filtrele</button>
        </form>
    </div>
</div>


<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SurName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SurName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>

                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = @item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = @item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = @item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>
